<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA版本问题导致${pageContext.session}无提示</title>
      <link href="/2022/11/28/IDEA%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4$%7BpageContext.session%7D%E6%97%A0%E6%8F%90%E7%A4%BA/"/>
      <url>/2022/11/28/IDEA%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4$%7BpageContext.session%7D%E6%97%A0%E6%8F%90%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​在IDEA2021.2.3版本中，jsp代码&lt;%%&gt;中或者el表达式#{}中pageContext这个jsp内置对象不能正常提示，见下图。而其他内置对象比如session或者request可以正常提示。</p><p><img src="https://raw.githubusercontent.com/Lounwb/imgbed-picgo-repo/master/blogimg/QQ%E5%9B%BE%E7%89%8720221127225647.png"></p><p><img src="https://raw.githubusercontent.com/Lounwb/imgbed-picgo-repo/master/blogimg/QQ%E5%9B%BE%E7%89%8720221127225652.png"></p><h2 id="查看报错原因"><a href="#查看报错原因" class="headerlink" title="查看报错原因"></a>查看报错原因</h2><p><img src="https://raw.githubusercontent.com/Lounwb/imgbed-picgo-repo/master/blogimg/QQ%E5%9B%BE%E7%89%8720221127225942.png"></p><p>原来是IDEA自动到javax包下面去找。我tomcat的版本是10.0.26，是比较新的版本，包名由javax变成了jakarta。</p><p><img src="https://raw.githubusercontent.com/Lounwb/imgbed-picgo-repo/master/blogimg/QQ%E5%9B%BE%E7%89%8720221127230017.png"></p><h2 id="找到解决方案"><a href="#找到解决方案" class="headerlink" title="找到解决方案"></a>找到解决方案</h2><p>所以我想到应该是IDEA版本的问题，所以我更新版本到2022.2.3（其实IDEA2021.3.2就解决了这个问题）</p><p><img src="https://raw.githubusercontent.com/Lounwb/imgbed-picgo-repo/master/blogimg/QQ%E5%9B%BE%E7%89%8720221127230227.png"></p><p>更新以后就可以正常提示了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> bug </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库丢失问题</title>
      <link href="/2022/11/28/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/28/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>前一天学习MyBatis的时候使用Navicat，关电脑的时候没关闭数据库，第二天再用的时候连接好数据库发现库名不对，而且我用的数据库也没了，以为我不小心删了</p><h2 id="寻找Bug"><a href="#寻找Bug" class="headerlink" title="寻找Bug"></a>寻找Bug</h2><p>当时想到了以下几种可能</p><p>1.使用的navicat破解版，有Bug</p><p>2.不小心按到快捷键删除库. 查看日志发现navicat的日志只能查看本次使用的日志，没有以前的日志</p><h2 id="找到Bug"><a href="#找到Bug" class="headerlink" title="找到Bug"></a>找到Bug</h2><p><img src="https://raw.githubusercontent.com/Lounwb/imgbed-picgo-repo/master/blogimg/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20221127230818.jpg"></p><p>表哥说MySQL有两个服务，一个是MySQL，另一个是MySQL80。两个服务用的不同的本地文件。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>把MySQL80服务禁止掉 启动MySQL服务即可，找到原来的库</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串字典序</title>
      <link href="/2022/05/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E5%85%B8%E5%BA%8F/"/>
      <url>/2022/05/29/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E5%85%B8%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span>    按字典顺序比较两个字符串。该比较基于字符串中各个字符的 <span class="token class-name">Unicode</span> 值。按字典顺序将此 <span class="token class-name">String</span> 对象表示的字符序列与参数字符串所表示的字符序列进行比较。如果按字典顺序此 <span class="token class-name">String</span> 对象位于参数字符串之前，则比较结果为一个负整数。如果按字典顺序此 <span class="token class-name">String</span> 对象位于参数字符串之后，则比较结果为一个正整数。如果这两个字符串相等，则结果为 <span class="token number">0</span>；compareTo 只在方法 <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> 返回 <span class="token boolean">true</span> 时才返回 <span class="token number">0</span>。 这是字典排序的定义。如果这两个字符串不同，那么它们要么在某个索引处的字符不同（该索引对二者均为有效索引），要么长度不同，或者同时具备这两种情况。如果它们在一个或多个索引位置上的字符不同，假设 k 是这类索引的最小值；则在位置 k 上具有较小值的那个字符串（使用 <span class="token operator">&lt;</span> 运算符确定），其字典顺序在其他字符串之前。在这种情况下，compareTo 返回这两个字符串在位置 k 处两个<span class="token keyword">char</span> 值的差，即值：  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">-</span>anotherString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> 如果没有字符不同的索引位置，则较短字符串的字典顺序在较长字符串之前。在这种情况下，compareTo 返回这两个字符串长度的差，即值：  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>anotherString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 指定者：接口 <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> 中的 compareTo参数：anotherString <span class="token operator">-</span> 要比较的 <span class="token class-name">String</span>。 返回：如果参数字符串等于此字符串，则返回值 <span class="token number">0</span>；如果此字符串按字典顺序小于字符串参数，则返回一个小于 <span class="token number">0</span> 的值；如果此字符串按字典顺序大于字符串参数，则返回一个大于 <span class="token number">0</span> 的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>如果要判断s1和s2的在字典中的位置，只需要调用s1.compareTo()方法，然后与0做比较。</p><p>区分大小写，大写在小写前面(原理是用ascii比较的).</p><p>所以说字典序里，大写字母小于小写字母。</p><ul><li>如果s1.compareTo(s2) &lt; 0说明s1在s2之前</li><li>如果s1.compareTo(s2) &gt; 0说明s1在s2之后</li></ul><p>用于：请你返回发出单词数 <strong>最多</strong> 的发件人名字。如果有多个发件人发出最多单词数，请你返回 <strong>字典序</strong> 最大的名字。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/202205291708056.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>判断字符串是否为数字串</title>
      <link href="/2022/05/29/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97%E4%B8%B2/"/>
      <url>/2022/05/29/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>使用正则表达式</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 判断是否是数字字符串,支持实数.     * @param str 目标字符串     * @return 是数字字符串返回true,否则返回false     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumberString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span>Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span>Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"-?[0-9]+(\\.[0-9]+)?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>判断数字数组是否有序</title>
      <link href="/2022/05/29/%E5%88%A4%E6%96%AD%E6%95%B0%E5%AD%97%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E6%9C%89%E5%BA%8F/"/>
      <url>/2022/05/29/%E5%88%A4%E6%96%AD%E6%95%B0%E5%AD%97%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E6%9C%89%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>整体有序充要条件是任意多个有序(任意两个有序，相邻两个有序)</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAsc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣周赛总结一</title>
      <link href="/2022/05/29/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93%E4%B8%80/"/>
      <url>/2022/05/29/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第79场双周赛"><a href="#第79场双周赛" class="headerlink" title="第79场双周赛"></a>第79场双周赛</h1><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/202205291558994.png"></p><h2 id="题目1：6083-判断一个数的数字计数是否等于数位的值"><a href="#题目1：6083-判断一个数的数字计数是否等于数位的值" class="headerlink" title="题目1：6083. 判断一个数的数字计数是否等于数位的值"></a>题目1：<a href="https://leetcode.cn/problems/check-if-number-has-equal-digit-count-and-digit-value/">6083. 判断一个数的数字计数是否等于数位的值</a></h2><p><strong>难度：简单</strong></p><p>给你一个下标从<strong>0</strong>  开始长度为 <code>n</code>的字符串 <code>num</code> ，它只包含数字。</p><p>如果对于 <strong>每个</strong> <code>0 &lt;= i &lt; n</code> 的下标 <code>i</code> ，都满足数位 <code>i</code> 在 <code>num</code> 中出现了 <code>num[i]</code>次，那么请你返回 <code>true</code> ，否则返回 <code>false</code> </p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：num <span class="token operator">=</span> <span class="token string">"1210"</span>输出：<span class="token boolean">true</span>解释：num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'1'</span> 。数字 <span class="token number">0</span> 在 num 中出现了一次。num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'2'</span> 。数字 <span class="token number">1</span> 在 num 中出现了两次。num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'1'</span> 。数字 <span class="token number">2</span> 在 num 中出现了一次。num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span> 。数字 <span class="token number">3</span> 在 num 中出现了零次。<span class="token string">"1210"</span> 满足题目要求条件，所以返回 <span class="token boolean">true</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：num <span class="token operator">=</span> <span class="token string">"030"</span>输出：<span class="token boolean">false</span>解释：num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span> 。数字 <span class="token number">0</span> 应该出现 <span class="token number">0</span> 次，但是在 num 中出现了一次。num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'3'</span> 。数字 <span class="token number">1</span> 应该出现 <span class="token number">3</span> 次，但是在 num 中出现了零次。num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span> 。数字 <span class="token number">2</span> 在 num 中出现了 <span class="token number">0</span> 次。下标 <span class="token number">0</span> 和 <span class="token number">1</span> 都违反了题目要求，所以返回 <span class="token boolean">false</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">digitCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：6084-最多单词数的发件人"><a href="#题目2：6084-最多单词数的发件人" class="headerlink" title="题目2：6084. 最多单词数的发件人"></a>题目2：<a href="https://leetcode.cn/problems/check-if-number-has-equal-digit-count-and-digit-value/"><a href="https://leetcode.cn/problems/sender-with-largest-word-count/">6084. 最多单词数的发件人</a></a></h2><p><strong>难度：中等</strong></p><p>给你一个聊天记录，共包含 <code>n</code> 条信息。给你两个字符串数组 <code>messages</code> 和 <code>senders</code> ，其中 <code>messages[i]</code> 是 <code>senders[i]</code> 发出的一条 <strong>信息</strong> 。</p><p>一条 <strong>信息</strong> 是若干用单个空格连接的 <strong>单词</strong> ，信息开头和结尾不会有多余空格。发件人的 <strong>单词计数</strong> 是这个发件人总共发出的 <strong>单词数</strong> 。注意，一个发件人可能会发出多于一条信息。</p><p>请你返回发出单词数 <strong>最多</strong> 的发件人名字。如果有多个发件人发出最多单词数，请你返回 <strong>字典序</strong> 最大的名字。</p><p><strong>注意：</strong></p><ul><li>字典序里，大写字母小于小写字母。</li><li><code>&quot;Alice&quot;</code> 和 <code>&quot;alice&quot;</code> 是不同的名字。</li></ul><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello userTwooo"</span><span class="token punctuation">,</span><span class="token string">"Hi userThree"</span><span class="token punctuation">,</span><span class="token string">"Wonderful day Alice"</span><span class="token punctuation">,</span><span class="token string">"Nice day userThree"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> senders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Alice"</span><span class="token punctuation">,</span><span class="token string">"userTwo"</span><span class="token punctuation">,</span><span class="token string">"userThree"</span><span class="token punctuation">,</span><span class="token string">"Alice"</span><span class="token punctuation">]</span>输出：<span class="token string">"Alice"</span>解释：<span class="token class-name">Alice</span> 总共发出了 <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">5</span> 个单词。userTwo 发出了 <span class="token number">2</span> 个单词。userThree 发出了 <span class="token number">3</span> 个单词。由于 <span class="token class-name">Alice</span> 发出单词数最多，所以我们返回 <span class="token string">"Alice"</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"How is leetcode for everyone"</span><span class="token punctuation">,</span><span class="token string">"Leetcode is useful for practice"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> senders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">,</span><span class="token string">"Charlie"</span><span class="token punctuation">]</span>输出：<span class="token string">"Charlie"</span>解释：<span class="token class-name">Bob</span> 总共发出了 <span class="token number">5</span> 个单词。<span class="token class-name">Charlie</span> 总共发出了 <span class="token number">5</span> 个单词。由于最多单词数打平，返回字典序最大的名字，也就是 <span class="token class-name">Charlie</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/202205291613426.png"></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">largestWordCount</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> messages<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> senders<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token function">searchSame</span><span class="token punctuation">(</span>senders<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>senders<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>messages<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+=</span>messages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> senders<span class="token punctuation">[</span>ints<span class="token punctuation">[</span><span class="token function">searchMax</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>senders<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchSame</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> senders<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>senders<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>senders<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>senders<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>senders<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>senders<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>senders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> senders<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>senders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>senders<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第295场周赛"><a href="#第295场周赛" class="headerlink" title="第295场周赛"></a>第295场周赛</h1><h2 id="战况-1"><a href="#战况-1" class="headerlink" title="战况"></a>战况</h2><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/202205291606387.png"></p><h2 id="题目1：6078-重排字符形成目标字符串"><a href="#题目1：6078-重排字符形成目标字符串" class="headerlink" title="题目1：6078. 重排字符形成目标字符串"></a>题目1：<a href="https://leetcode.cn/problems/check-if-number-has-equal-digit-count-and-digit-value/"><a href="https://leetcode.cn/problems/rearrange-characters-to-make-target-string/">6078. 重排字符形成目标字符串</a></a></h2><p><strong>难度：简单</strong></p><p>给你两个下标从  <strong>0</strong> 开始的字符串 <code>s</code> 和 <code>target</code> 。你可以从 <code>s</code> 取出一些字符并将其重排，得到若干新的字符串。</p><p>从 <code>s</code> 中取出字符并重新排列，返回可以形成 <code>target</code> 的 <strong>最大</strong> 副本数。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：s <span class="token operator">=</span> <span class="token string">"ilovecodingonleetcode"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"code"</span>输出：<span class="token number">2</span>解释：对于 <span class="token string">"code"</span> 的第 <span class="token number">1</span> 个副本，选取下标为 <span class="token number">4</span> 、<span class="token number">5</span> 、<span class="token number">6</span> 和 <span class="token number">7</span> 的字符。对于 <span class="token string">"code"</span> 的第 <span class="token number">2</span> 个副本，选取下标为 <span class="token number">17</span> 、<span class="token number">18</span> 、<span class="token number">19</span> 和 <span class="token number">20</span> 的字符。形成的字符串分别是 <span class="token string">"ecod"</span> 和 <span class="token string">"code"</span> ，都可以重排为 <span class="token string">"code"</span> 。可以形成最多 <span class="token number">2</span> 个 <span class="token string">"code"</span> 的副本，所以返回 <span class="token number">2</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：s <span class="token operator">=</span> <span class="token string">"abcba"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"abc"</span>输出：<span class="token number">1</span>解释：选取下标为 <span class="token number">0</span> 、<span class="token number">1</span> 和 <span class="token number">2</span> 的字符，可以形成 <span class="token string">"abc"</span> 的 <span class="token number">1</span> 个副本。 可以形成最多 <span class="token number">1</span> 个 <span class="token string">"abc"</span> 的副本，所以返回 <span class="token number">1</span> 。注意，尽管下标 <span class="token number">3</span> 和 <span class="token number">4</span> 分别有额外的 <span class="token char">'a'</span> 和 <span class="token char">'b'</span> ，但不能重用下标 <span class="token number">2</span> 处的 <span class="token char">'c'</span> ，所以无法形成 <span class="token string">"abc"</span> 的第 <span class="token number">2</span> 个副本。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 3:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：s <span class="token operator">=</span> <span class="token string">"abbaccaddaeea"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"aaaaa"</span>输出：<span class="token number">1</span>解释：选取下标为 <span class="token number">0</span> 、<span class="token number">3</span> 、<span class="token number">6</span> 、<span class="token number">9</span> 和 <span class="token number">12</span> 的字符，可以形成 <span class="token string">"aaaaa"</span> 的 <span class="token number">1</span> 个副本。可以形成最多 <span class="token number">1</span> 个 <span class="token string">"aaaaa"</span> 的副本，所以返回 <span class="token number">1</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rearrangeCharacters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tnums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>target<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tnums<span class="token punctuation">[</span>target<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>target<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">/</span>tnums<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">&lt;</span>ans<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">=</span>nums<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token operator">/</span>tnums<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：6079-价格减免"><a href="#题目2：6079-价格减免" class="headerlink" title="题目2：6079. 价格减免"></a>题目2：<a href="https://leetcode.cn/problems/check-if-number-has-equal-digit-count-and-digit-value/"><a href="https://leetcode.cn/problems/apply-discount-to-prices/">6079. 价格减免</a></a></h2><p><strong>难度：中等</strong></p><p><strong>句子</strong> 是由若干个单词组成的字符串，单词之间用单个空格分隔，其中每个单词可以包含数字、小写字母、和美元符号 <code>&#39;$&#39;</code> 。如果单词的形式为美元符号后跟着一个非负实数，那么这个单词就表示一个价格。</p><ul><li>例如 <code>&quot;$100&quot;</code>、<code>&quot;$23&quot;</code> 和 <code>&quot;$6.75&quot;</code> 表示价格，而 <code>&quot;100&quot;</code>、<code>&quot;$&quot;</code> 和 <code>&quot;2$3&quot;</code> 不是。</li></ul><p><strong>注意：</strong>本题输入中的价格均为整数。</p><p>给你一个字符串 <code>sentence</code> 和一个整数 <code>discount</code> 。对于每个表示价格的单词，都在价格的基础上减免 <code>discount%</code> ，并 <strong>更新</strong> 该单词到句子中。所有更新后的价格应该表示为一个 <strong>恰好保留小数点后两位</strong> 的数字。</p><p>返回表示修改后句子的字符串。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：sentence <span class="token operator">=</span> <span class="token string">"there are $1 $2 and 5$ candies in the shop"</span><span class="token punctuation">,</span> discount <span class="token operator">=</span> <span class="token number">50</span>输出：<span class="token string">"there are $0.50 $1.00 and 5$ candies in the shop"</span>解释：表示价格的单词是 <span class="token string">"$1"</span> 和 <span class="token string">"$2"</span> 。 <span class="token operator">-</span> <span class="token string">"$1"</span> 减免 <span class="token number">50</span><span class="token operator">%</span> 为 <span class="token string">"$0.50"</span> ，所以 <span class="token string">"$1"</span> 替换为 <span class="token string">"$0.50"</span> 。<span class="token operator">-</span> <span class="token string">"$2"</span> 减免 <span class="token number">50</span><span class="token operator">%</span> 为 <span class="token string">"$1"</span> ，所以 <span class="token string">"$1"</span> 替换为 <span class="token string">"$1.00"</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：sentence <span class="token operator">=</span> <span class="token string">"1 2 $3 4 $5 $6 7 8$ $9 $10$"</span><span class="token punctuation">,</span> discount <span class="token operator">=</span> <span class="token number">100</span>输出：<span class="token string">"1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$"</span>解释：任何价格减免 <span class="token number">100</span><span class="token operator">%</span> 都会得到 <span class="token number">0</span> 。表示价格的单词分别是 <span class="token string">"$3"</span>、<span class="token string">"$5"</span>、<span class="token string">"$6"</span> 和 <span class="token string">"$9"</span>。每个单词都替换为 <span class="token string">"$0.00"</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">discountPrices</span><span class="token punctuation">(</span><span class="token class-name">String</span> sentence<span class="token punctuation">,</span> <span class="token keyword">int</span> discount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> sentence<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> dAssit <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> assit<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                assit <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNumberString</span><span class="token punctuation">(</span>assit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dAssit <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>assit<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">-</span>discount<span class="token operator">*</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"$"</span><span class="token operator">+</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span>dAssit<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token operator">+=</span><span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isNumberString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span>Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span>Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"-?[0-9]+(\\.[0-9]+)?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>2022.5.58 晚上10.30-12.00参加了第79场双周赛，然后第二天中午10.30-12.00参加了第295场周赛.</p><p>可能也是刚开始的原因吧，上一次打周赛的时候第一题几分钟就能过，然后第二题第三题就卡。主要是算法的问题，用自己的方法必定超时，看了看大佬的代码，基本就二三十行以内就能解决，需要你去调用Java的API去解决一部分，比如Set,TreeMap等等，利用其性质简化。</p><p>再就是学的东西还很少。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣周赛 </tag>
            
            <tag> 模拟算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>965.单值二叉树</title>
      <link href="/2022/05/24/965-%E5%8D%95%E5%80%BC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/05/24/965-%E5%8D%95%E5%80%BC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：965-单值二叉树"><a href="#题目：965-单值二叉树" class="headerlink" title="题目：965. 单值二叉树"></a>题目：<a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/"><a href="https://leetcode.cn/problems/univalued-binary-tree/">965. 单值二叉树</a></a></h2><p><strong>难度：简单</strong></p><p>  给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对</p><p><strong>示例 1:</strong></p><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/screen-shot-2018-12-25-at-50104-pm.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/screen-shot-2018-12-25-at-50050-pm.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出：<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/610e3fa02b5650ce.png"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p> 运用贪心算法，如果这棵二叉树是单值二叉树，那么他的左右子树均为单值二叉树</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUnivalTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">isUnival</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isUnival</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUnival</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">isUnival</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isUnival</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2022/05/22/HelloHexo/"/>
      <url>/2022/05/22/HelloHexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>462.最少移动次数使数组元素相等II</title>
      <link href="/2022/05/19/462-%E6%9C%80%E5%B0%91%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89II/"/>
      <url>/2022/05/19/462-%E6%9C%80%E5%B0%91%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89II/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：462-最少移动次数使数组元素相等-II"><a href="#题目：462-最少移动次数使数组元素相等-II" class="headerlink" title="题目：462. 最少移动次数使数组元素相等 II"></a>题目：<a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/"><a href="https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/">462. 最少移动次数使数组元素相等 II</a></a></h2><p><strong>难度：中等</strong></p><p> 给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，返回使所有数组元素相等需要的最少移动数。</p><p>在一步操作中，你可以使数组中的一个元素加 <code>1</code> 或者减 <code>1</code> 。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token number">2</span>解释：只需要两步操作（每步操作指南使一个元素加 <span class="token number">1</span> 或减 <span class="token number">1</span>）：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>  <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>输出：<span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://pic.leetcode-cn.com/1652934783-MCDIJj-QQ%E6%88%AA%E5%9B%BE20220519123229.png"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><img src="https://pic.leetcode-cn.com/1652934798-JhZOmO-QQ%E6%88%AA%E5%9B%BE20220519123111.png"></p><p>下图为证明该性质的过程:</p><p><img src="https://pic.leetcode-cn.com/1652934763-BkmvEf-6f480f9d46bba5bcb2cb6487aea86c4.jpg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMoves2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span> nums<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 中位数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>953-验证外星语词典</title>
      <link href="/2022/05/17/953-%E9%AA%8C%E8%AF%81%E5%A4%96%E6%98%9F%E8%AF%AD%E8%AF%8D%E5%85%B8/"/>
      <url>/2022/05/17/953-%E9%AA%8C%E8%AF%81%E5%A4%96%E6%98%9F%E8%AF%AD%E8%AF%8D%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：验证外星语词典"><a href="#题目：验证外星语词典" class="headerlink" title="题目：验证外星语词典"></a>题目：<a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/">验证外星语词典</a></h2><p><strong>难度：简单</strong></p><p>  某种外星语也使用英文小写字母，但可能顺序 order 不同。字母表的顺序（order）是一些小写字母的排列。给定一组用外星语书写的单词 words，以及其字母表的顺序 order，只有当给定的单词在这种外星语中按字典序排列时，返回 true；否则，返回 false。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"leetcode"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token string">"hlabcdefgijkmnopqrstuvwxyz"</span>输出：<span class="token boolean">true</span>解释：在该语言的字母表中，<span class="token char">'h'</span> 位于 <span class="token char">'l'</span> 之前，所以单词序列是按字典序排列的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"word"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">,</span><span class="token string">"row"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token string">"worldabcefghijkmnpqstuvxyz"</span>输出：<span class="token boolean">false</span>解释：在该语言的字母表中，<span class="token char">'d'</span> 位于 <span class="token char">'l'</span> 之后，那么 words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> words<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>，因此单词序列不是按字典序排列的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 3:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span><span class="token string">"app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz"</span>输出：<span class="token boolean">false</span>解释：当前三个字符 <span class="token string">"app"</span> 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 <span class="token string">"apple"</span> <span class="token operator">></span> <span class="token string">"app"</span>，因为 <span class="token char">'l'</span> <span class="token operator">></span> <span class="token char">'∅'</span>，其中 <span class="token char">'∅'</span> 是空白字符，定义为比任何其他字符都小（更多信息）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/05/23/b5521ce9212fbcbd.jpg"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>如果单词整体有序那么部分一定有序，反之同样成立。利用这种性质我们可以只比较相邻两个单词的顺序，规则如下：<br>    1.如果当前字母相同，比较下一个字母<br>    2.如果当前字母在order中的位置比下一个字母在order中的位置的前面，那么有序.<br>    3.如果当前字母在order中的位置比下一个字母在order中的位置的前面，那么无序.<br>    4.如果当前单词读完，而下一个单词没读完，则有序.<br>    5.如果当前单词没读完，下一个单词读完，则无序.<br>我们用’#’表示空位，如果读到’#’表示当前单词读完.</p><p><img src="https://s3.bmp.ovh/imgs/2022/05/23/0e7efb73d4f3f9dd.jpg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlienSorted</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> <span class="token class-name">String</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>words<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRightSequence</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>words<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRightSequence</span><span class="token punctuation">(</span><span class="token class-name">String</span> former<span class="token punctuation">,</span><span class="token class-name">String</span> latter<span class="token punctuation">,</span><span class="token class-name">String</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> former<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> latter<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> former<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>latter<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> formerChar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> latterChar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> f<span class="token punctuation">,</span>l<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            formerChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'#'</span><span class="token punctuation">;</span>            latterChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'#'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>former<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>formerChar<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>former<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>latter<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>latterChar<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>latter<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            f <span class="token operator">=</span> formerChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            l <span class="token operator">=</span> latterChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token char">'#'</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token char">'#'</span> <span class="token operator">&amp;&amp;</span> f <span class="token operator">!=</span> <span class="token char">'#'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">></span> order<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">&lt;</span> order<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题04.06后继者</title>
      <link href="/2022/05/16/%E9%9D%A2%E8%AF%95%E9%A2%9804-06%E5%90%8E%E7%BB%A7%E8%80%85/"/>
      <url>/2022/05/16/%E9%9D%A2%E8%AF%95%E9%A2%9804-06%E5%90%8E%E7%BB%A7%E8%80%85/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：面试题-04-06-后继者"><a href="#题目：面试题-04-06-后继者" class="headerlink" title="题目：面试题 04.06. 后继者"></a>题目：<a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/"><a href="https://leetcode.cn/problems/successor-lcci/">面试题 04.06. 后继者</a></a></h2><p><strong>难度：中等</strong></p><p>  设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。</p><p>如果指定节点没有对应的“下一个”节点，则返回<code>null</code>。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">1</span>  <span class="token number">2</span> <span class="token operator">/</span> \<span class="token number">1</span>   <span class="token number">3</span>输出<span class="token operator">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">6</span>      <span class="token number">5</span>     <span class="token operator">/</span> \    <span class="token number">3</span>   <span class="token number">6</span>   <span class="token operator">/</span> \  <span class="token number">2</span>   <span class="token number">4</span> <span class="token operator">/</span>   <span class="token number">1</span>输出<span class="token operator">:</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="思路1-将BST中序遍历存到线性表中，后继元素就是p节点的直接后继"><a href="#思路1-将BST中序遍历存到线性表中，后继元素就是p节点的直接后继" class="headerlink" title="思路1:将BST中序遍历存到线性表中，后继元素就是p节点的直接后继"></a>思路1:将BST中序遍历存到线性表中，后继元素就是p节点的直接后继</h3><p><img src="https://pic.leetcode-cn.com/1652690716-NjEvAG-QQ%E6%88%AA%E5%9B%BE20220516150153.png"></p><p><img src="https://pic.leetcode-cn.com/1652692483-AvaPVZ-af93a45c946f6bf736dad58ab8c6e17.jpg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode &#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &#123; val = x; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//中序后继</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">inorderSuccessor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> node<span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">==</span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        node <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h3><p>我们用一个栈来存储遍历过的元素，节点p的后继有两种存在可能，一种是如果从头结点向左遍历那么p的后继一定在p的所在栈的位置的下面并且是第一个比p.val大的节点，如果向右遍历，由于p的后继一定比p大，所以p的后继一定在p的右边，也就是p的后继一定在p的右子树中.所以我们采取这种遍历规则：</p><p>1.遍历过的节点都压入栈中<br>2.如果curr.val &gt; p.val<br>        访问curr.left，<br>3.如果curr.val &lt; p.val<br>        访问curr.left<br>4.如果curr.val &#x3D;&#x3D; p.val<br>        将curr的右子树中序遍历放入栈中<br>        这样构造出的栈可以找出p的后继，但是p的后继可能出现在p的上面也可能出现在下面.所以找后继的规则为:<br>5.如果p是栈顶<br>        那么找出p下面的第一个比p大的节点，该节点为p的后继.找不到则返回null<br>6.如果p不是栈顶<br>        依次弹栈，直到得到p上面的第一个节点，该节点为p的后继.</p><p><img src="https://pic.leetcode-cn.com/1652692337-oSOLXQ-QQ%E6%88%AA%E5%9B%BE20220516164329.png"></p><p><img src="https://pic.leetcode-cn.com/1652692361-jcXoiM-f6b6f40d09a6499800c882cd9ed9674.jpg"></p><p><img src="https://pic.leetcode-cn.com/1652692080-gChtTn-QQ%E6%88%AA%E5%9B%BE20220516170747.png"></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for a binary tree node. * public class TreeNode &#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &#123; val = x; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//中序后继</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">inorderSuccessor</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> pop <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>curr <span class="token operator">=</span> root<span class="token punctuation">,</span>pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">inorder</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>right<span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">==</span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> pop<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>val <span class="token operator">></span> p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pre <span class="token operator">=</span> pop<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 中序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>812.最大三角形面积</title>
      <link href="/2022/05/15/812-%E6%9C%80%E5%A4%A7%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
      <url>/2022/05/15/812-%E6%9C%80%E5%A4%A7%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：812-最大三角形面积"><a href="#题目：812-最大三角形面积" class="headerlink" title="题目：812. 最大三角形面积"></a>题目：<a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/"><a href="https://leetcode.cn/problems/largest-triangle-area/">812. 最大三角形面积</a></a></h2><p><strong>难度：简单</strong></p><p>给定包含多个点的集合，从其中取三个点组成三角形，返回能组成的最大三角形的面积</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入<span class="token operator">:</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>输出<span class="token operator">:</span> <span class="token number">2</span>解释<span class="token operator">:</span> 这五个点如下图所示。组成的橙色三角形是最大的，面积为<span class="token number">2</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Lounwb/PicGoImg/master/1027.png"></p><p><img src="https://pic.leetcode-cn.com/1652608351-mUHTzw-QQ%E6%88%AA%E5%9B%BE20220515174643.png"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>牺牲空间的时间保护法<br>枚举可能的三角形面积，然后比较出最大的三角形面积.(巨low的做法…???看了看题解真的除了暴力没有办法解决吗)<br>(len &#x3D;&#x3D; 3可以和下面的合并，不过合并了之后会变慢很多!!还有不要用库函数Math.max(area,Math.abs()))越来越慢!<br>这可是O(Cn3)&#x3D;C(n^3)的复杂度，一开始想了个O(n^2)的复杂度的，结果只能跑一半多数据，仔细想了想，还大学生呢，这不那啥吗<br>怎么可能对<br>附上一开始的思路..</p><p><img src="https://pic.leetcode-cn.com/1652608865-EPuzNW-de5288bcdd4845f4f496641e1ae150b.jpg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token comment">/*    public static void main(String[] args) &#123;        Solution solution = new Solution();        int[][] points = &#123;&#123;1,0&#125;,&#123;0,0&#125;,&#123;0,1&#125;&#125;;        System.out.println(solution.largestTriangleArea(points));    &#125;*/</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">largestTriangleArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">// double maxArea = 0;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> areaList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>len<span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>b1<span class="token punctuation">,</span>b2<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a1 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a2 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            b1 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            b2 <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            area <span class="token operator">=</span> <span class="token number">0.5</span><span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a1<span class="token operator">*</span>b2<span class="token operator">-</span>a2<span class="token operator">*</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> area<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    a1 <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    a2 <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    b1 <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    b2 <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    areaList<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a1<span class="token operator">*</span>b2<span class="token operator">-</span>a2<span class="token operator">*</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">/*area = 0.5*Math.abs(a1*b2-a2*b1);                    if(area > maxArea)&#123;                        maxArea = area;                    &#125;*/</span>                    <span class="token comment">/*area = Math.max(area,0.5*Math.abs(a1*b2-a2*b1));*/</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>areaList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> area<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                area <span class="token operator">=</span> areaList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> area<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*  public static void main(String[] args) &#123;        Solution solution = new Solution();        int[][] points = &#123;&#123;8,10&#125;,&#123;2,7&#125;,&#123;9,2&#125;,&#123;4,10&#125;&#125;;        System.out.println(solution.largestTriangleArea(points));    &#125;*/</span>    <span class="token comment">/*     * 1.找到距离最远的两点P1,P2     * 2.找到距离直线P1P2最远的一点P3     * 3.三角形P1P2P3即为所求三角形，该面积最大     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">largestTriangleArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">searchMaxLength</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>targets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p3 <span class="token operator">=</span> <span class="token function">searchFarPoint</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span>targets<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a1 <span class="token operator">=</span> points<span class="token punctuation">[</span>targets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> points<span class="token punctuation">[</span>targets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b1 <span class="token operator">=</span> points<span class="token punctuation">[</span>targets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b2 <span class="token operator">=</span> points<span class="token punctuation">[</span>targets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>p3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0.5</span><span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>a1<span class="token operator">*</span>b2<span class="token operator">-</span>a2<span class="token operator">*</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">searchMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targets<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> maxLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>points<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                length <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">></span> maxLength<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    maxLength <span class="token operator">=</span> length<span class="token punctuation">;</span>                    targets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    targets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchFarPoint</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> points<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">></span> maxLength<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    maxLength <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p3 <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> p3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当时这里用的时候有bug 因为 points的运算都是整形 比如3/10 = 0 然后把0赋给k 而不是0.3 所以用的时候</span>        <span class="token comment">//可以通过和0.0的运算进行浮点型和整形数据的转化</span>        <span class="token keyword">double</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> t <span class="token operator">=</span> points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>k<span class="token operator">*</span>points<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>points<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>k<span class="token operator">*</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">)</span> <span class="token operator">></span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                d <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>k<span class="token operator">*</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                p3 <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> p3<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 枚举 </tag>
            
            <tag> 三角形面积 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>691.贴纸拼词</title>
      <link href="/2022/05/14/691-%E8%B4%B4%E7%BA%B8%E6%8B%BC%E8%AF%8D/"/>
      <url>/2022/05/14/691-%E8%B4%B4%E7%BA%B8%E6%8B%BC%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：691-贴纸拼词"><a href="#题目：691-贴纸拼词" class="headerlink" title="题目：691. 贴纸拼词"></a>题目：<a href="https://leetcode.cn/problems/stickers-to-spell-word/">691. 贴纸拼词</a></h2><p><strong>难度：困难</strong></p><p>我们有 n 种不同的贴纸。每个贴纸上都有一个小写的英文单词。</p><p>您想要拼写出给定的字符串 target ，方法是从收集的贴纸中切割单个字母并重新排列它们。如果你愿意，你可以多次使用每个贴纸，每个贴纸的数量是无限的。</p><p>返回你需要拼出 target 的最小贴纸数量。如果任务不可能，则返回 -1 。</p><p>注意：在所有的测试用例中，所有的单词都是从 1000 个最常见的美国英语单词中随机选择的，并且 target 被选择为两个随机单词的连接。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入： stickers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"with"</span><span class="token punctuation">,</span><span class="token string">"example"</span><span class="token punctuation">,</span><span class="token string">"science"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"thehat"</span>输出：<span class="token number">3</span>解释：我们可以使用 <span class="token number">2</span> 个 <span class="token string">"with"</span> 贴纸，和 <span class="token number">1</span> 个 <span class="token string">"example"</span> 贴纸。把贴纸上的字母剪下来并重新排列后，就可以形成目标 “thehat“ 了。此外，这是形成目标字符串所需的最小贴纸数量。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：stickers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"notice"</span><span class="token punctuation">,</span><span class="token string">"possible"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"basicbasic"</span>输出：<span class="token operator">-</span><span class="token number">1</span>解释：我们不能通过剪切给定贴纸的字母来形成目标“basicbasic”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.leetcode-cn.com/1652517785-wQzPfO-QQ%E6%88%AA%E5%9B%BE20220514163839.png"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>55555做了一下午没做出来，算法有问题，按照下面的思路应该是没问题的，不过我没想到怎么实现</p><p><img src="https://pic.leetcode-cn.com/1652517842-bQwqYr-%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220514164314.jpg"></p><p>仔细想了想算法是错误的啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊，浪费两个下午的时间啊啊啊啊</p><p><img src="https://pic.leetcode-cn.com/1652856686-YeAqXb-%E6%97%A0%E6%A0%87%E9%A2%98.png"></p><p><img src="https://pic.leetcode-cn.com/1652856659-bFOBVo-%E6%97%A0%E6%A0%87%E9%A2%981.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"write"</span><span class="token punctuation">,</span><span class="token string">"their"</span><span class="token punctuation">,</span><span class="token string">"read"</span><span class="token punctuation">,</span><span class="token string">"quiet"</span><span class="token punctuation">,</span><span class="token string">"against"</span><span class="token punctuation">,</span><span class="token string">"down"</span><span class="token punctuation">,</span><span class="token string">"process"</span><span class="token punctuation">,</span><span class="token string">"check"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> target <span class="token operator">=</span> <span class="token string">"togetherhand"</span><span class="token punctuation">;</span>        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">minStickers</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minStickers = "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minStickers</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stickers<span class="token punctuation">,</span> <span class="token class-name">String</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>stickers<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">;</span>        <span class="token keyword">char</span> x <span class="token operator">=</span><span class="token number">97</span><span class="token punctuation">;</span>        <span class="token comment">//O(n^2)</span>        <span class="token comment">/**         * posList是stickers的字母表         * a:1b:0c:0d:0e:1f:0g:0h:0i:0j:0k:0l:1m:0n:0o:0p:2q:0r:0s:0t:0u:0v:0w:0x:0y:0z:0         * a:1b:0c:0d:0e:0f:0g:1h:0i:0j:0k:0l:0m:1n:1o:0p:0q:0r:0s:2t:0u:1v:0w:0x:0y:0z:0         * a:0b:0c:1d:0e:0f:1g:0h:0i:1j:0k:0l:0m:1n:0o:2p:0q:0r:1s:1t:1u:0v:0w:0x:0y:0z:0         * 使用方法: posList[i][0~25] i代表第几个贴纸，0~25分别代表字母a~z出现频率；         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"posList:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stickers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            chars <span class="token operator">=</span> stickers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * desList是target的字母表         * a:1b:0c:0d:1e:0f:0g:0h:1i:1j:0k:0l:0m:0n:1o:0p:0q:0r:0s:0t:1u:0v:0w:1x:0y:0z:0         * 使用方法: desList[0~25] 0~25分别代表字母a~z出现频率         */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        chars <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            desList<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pos<span class="token operator">:</span>posList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">:</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token char">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              x<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          x<span class="token operator">=</span><span class="token number">97</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"desList:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token operator">:</span>desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token char">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">minStickers</span><span class="token punctuation">(</span>posList<span class="token punctuation">,</span>desList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minStickers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> stickerNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//firstNum是desList中第一个不为0的字母</span>        <span class="token keyword">int</span> firstNum<span class="token punctuation">;</span>        <span class="token comment">//secondNum是posList中第一个与desList中有公共字母的行数.</span>        <span class="token keyword">int</span> secondNum<span class="token punctuation">;</span>        <span class="token keyword">int</span> divide<span class="token punctuation">;</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>posList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                key <span class="token operator">=</span> <span class="token function">searchKey</span><span class="token punctuation">(</span>posList<span class="token punctuation">,</span>desList<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    secondNum <span class="token operator">=</span> <span class="token function">searchSecondNum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>posList<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        divide <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        divide <span class="token operator">=</span> desList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">/</span> posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    firstNum <span class="token operator">=</span> <span class="token function">searchFirstNum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> desList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstNum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> stickerNum<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    secondNum <span class="token operator">=</span> <span class="token function">searchSecondNum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>posList<span class="token punctuation">,</span> firstNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>secondNum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    divide <span class="token operator">=</span> desList<span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">/</span> posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">&lt;</span> posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        divide <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                stickerNum <span class="token operator">+=</span> divide<span class="token punctuation">;</span>                <span class="token function">deletePosNum</span><span class="token punctuation">(</span>posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">,</span> desList<span class="token punctuation">,</span> divide<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">/*else &#123;                    secondNum = searchSecondNum(0,posList,key);                    divide = desList[key]/posList[secondNum][key];                    stickerNum+=divide;                    deletePosNum(posList[secondNum],desList,divide);                    System.out.println(key);                &#125;*/</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stickerNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchFirstNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">>=</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchSecondNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">>=</span> posList<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;</span> posList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deletePosNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">,</span><span class="token keyword">int</span> divide<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*=</span>divide<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchKey</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> firstNum<span class="token punctuation">,</span>secondNum<span class="token punctuation">,</span>nextNum<span class="token punctuation">;</span>        <span class="token keyword">int</span> thirdNum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> target <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            firstNum <span class="token operator">=</span> <span class="token function">searchFirstNum</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>desList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>firstNum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            secondNum <span class="token operator">=</span> <span class="token function">searchSecondNum</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>posList<span class="token punctuation">,</span>firstNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>secondNum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>secondNum <span class="token operator">>=</span> posList<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> firstNum<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            nextNum <span class="token operator">=</span> <span class="token function">searchSecondNum</span><span class="token punctuation">(</span>secondNum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>posList<span class="token punctuation">,</span>firstNum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nextNum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    thirdNum <span class="token operator">=</span> firstNum<span class="token punctuation">;</span>                    target<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">/</span> posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> firstNum<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>       <span class="token comment">/* while(loop &lt; 26)&#123;            firstNum = searchFirstNum(loop++,desList);            if(loop == 26)&#123;                loop = 0;                target = 1;            &#125;            if(firstNum == -1)&#123;                break;            &#125;            secondNum = searchSecondNum(0,posList,firstNum);            if(secondNum == -1)&#123;                break;            &#125;            if(secondNum >= posList.length-1 &amp;&amp; target == 1)&#123;                return firstNum;            &#125;            nextNum = searchSecondNum(secondNum+1,posList,firstNum);            if(nextNum == -1)&#123;               */</span><span class="token operator">/</span><span class="token operator">*</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">/</span> posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> firstNum<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> firstNum<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token comment">//*</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> firstNum<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">/</span> posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> firstNum<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token operator">*</span><span class="token operator">/</span>        <span class="token keyword">return</span> thirdNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">/*  public int searchKey(int[][] posList,int[]desList)&#123;        for(int i=0;i&lt;26;i++)&#123;            if(isSingle(posList,searchFirstNum(i,desList)))&#123;                return i;            &#125;        &#125;        return -1;    &#125;    public boolean isSingle(int[][] posList,int firstNum)&#123;        int secondNum = searchSecondNum(posList, firstNum);        if(secondNum == -1)&#123;            return false;        &#125;        posList[secondNum][firstNum] = 0;        for(int i=0;i&lt;posList.length;i++)&#123;            if(posList[i][firstNum] == 1)&#123;                return false;            &#125;        &#125;        posList[secondNum][firstNum] = 1;        return true;    &#125;*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"these"</span><span class="token punctuation">,</span><span class="token string">"guess"</span><span class="token punctuation">,</span><span class="token string">"about"</span><span class="token punctuation">,</span><span class="token string">"garden"</span><span class="token punctuation">,</span><span class="token string">"him"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> target <span class="token operator">=</span> <span class="token string">"atomher"</span><span class="token punctuation">;</span>        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> solution<span class="token punctuation">.</span><span class="token function">minStickers</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minStickers = "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minStickers</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stickers<span class="token punctuation">,</span> <span class="token class-name">String</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>stickers<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">;</span><span class="token comment">//        char x =97;</span>        <span class="token comment">//O(n^2)</span>        <span class="token comment">/**         * posList是stickers的字母表         * a:1b:0c:0d:0e:1f:0g:0h:0i:0j:0k:0l:1m:0n:0o:0p:2q:0r:0s:0t:0u:0v:0w:0x:0y:0z:0         * a:1b:0c:0d:0e:0f:0g:1h:0i:0j:0k:0l:0m:1n:1o:0p:0q:0r:0s:2t:0u:1v:0w:0x:0y:0z:0         * a:0b:0c:1d:0e:0f:1g:0h:0i:1j:0k:0l:0m:1n:0o:2p:0q:0r:1s:1t:1u:0v:0w:0x:0y:0z:0         * 使用方法: posList[i][0~25] i代表第几个贴纸，0~25分别代表字母a~z出现频率；         */</span><span class="token comment">//        System.out.println("posList:");</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stickers<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            chars <span class="token operator">=</span> stickers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * desList是target的字母表         * a:1b:0c:0d:1e:0f:0g:0h:1i:1j:0k:0l:0m:0n:1o:0p:0q:0r:0s:0t:1u:0v:0w:1x:0y:0z:0         * 使用方法: desList[0~25] 0~25分别代表字母a~z出现频率         */</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        chars <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>chars<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            desList<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token comment">/* for(int[] pos:posList)&#123;            for(int c:pos)&#123;                System.out.print(x+":"+c+'\t');                x++;            &#125;            x=97;            System.out.println();        &#125;        System.out.println("desList:");        for(int c:desList)&#123;            System.out.print(x+":"+c+'\t');            x++;        &#125;        System.out.println();*/</span>        <span class="token keyword">return</span> <span class="token function">minStickers</span><span class="token punctuation">(</span>posList<span class="token punctuation">,</span>desList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minStickers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> stickerNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//firstNum是desList中第一个不为0的字母</span>        <span class="token keyword">int</span> firstNum<span class="token punctuation">;</span>        <span class="token comment">//secondNum是posList中第一个与desList中有公共字母的行数.</span>        <span class="token keyword">int</span> secondNum<span class="token punctuation">;</span>        <span class="token keyword">int</span> divide<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>posList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">/*if(isEmpty(desList))&#123;                    return stickerNum;                &#125;                if(desList[j] !=0 &amp;&amp; posList[i][j] == 0)&#123;                    return -1;                &#125;*/</span>                firstNum <span class="token operator">=</span> <span class="token function">searchFirstNum</span><span class="token punctuation">(</span>desList<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>firstNum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> stickerNum<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                secondNum <span class="token operator">=</span> <span class="token function">searchSecondNum</span><span class="token punctuation">(</span>posList<span class="token punctuation">,</span>firstNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>secondNum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                divide <span class="token operator">=</span> desList<span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span><span class="token operator">/</span>posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">[</span>firstNum<span class="token punctuation">]</span><span class="token punctuation">;</span>                stickerNum<span class="token operator">+=</span>divide<span class="token punctuation">;</span>                <span class="token function">deletePosNum</span><span class="token punctuation">(</span>posList<span class="token punctuation">[</span>secondNum<span class="token punctuation">]</span><span class="token punctuation">,</span>desList<span class="token punctuation">,</span>divide<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stickerNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchFirstNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchSecondNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList<span class="token punctuation">,</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> posList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deletePosNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> posList<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">,</span><span class="token keyword">int</span> divide<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*=</span>divide<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span>posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    desList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            posList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> des<span class="token operator">:</span>desList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>des <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题01.05一次编辑</title>
      <link href="/2022/05/13/%E9%9D%A2%E8%AF%95%E9%A2%9801-05%E4%B8%80%E6%AC%A1%E7%BC%96%E8%BE%91/"/>
      <url>/2022/05/13/%E9%9D%A2%E8%AF%95%E9%A2%9801-05%E4%B8%80%E6%AC%A1%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目-面试题-01-05-一次编辑"><a href="#题目-面试题-01-05-一次编辑" class="headerlink" title="题目:面试题 01.05. 一次编辑"></a>题目:<a href="https://leetcode.cn/problems/one-away-lcci/">面试题 01.05. 一次编辑</a></h2><p><strong>难度:中等</strong></p><p>  字符串有三种编辑操作:插入一个英文字符、删除一个英文字符或者替换一个英文字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入<span class="token operator">:</span> first <span class="token operator">=</span> <span class="token string">"pale"</span>second <span class="token operator">=</span> <span class="token string">"ple"</span>输出<span class="token operator">:</span> <span class="token class-name">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入<span class="token operator">:</span> first <span class="token operator">=</span> <span class="token string">"pales"</span>second <span class="token operator">=</span> <span class="token string">"pal"</span>输出<span class="token operator">:</span> <span class="token class-name">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://pic.leetcode-cn.com/1652409448-snxNOK-Snipaste_2022-05-13_10-21-13.jpg"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>  首先我们需要明确一次编辑导致的情况：插入或删除会使字符串长度与原来相差1，替换会导致字符串长度与原来相等。那么两个字符串但凡长度相差超过1说明编辑次数必然超过2 所以直接返回false。比较两个字符串相等很自然想到用双指针，这里我们用用到了指针p和指针q。</p><h4 id="1-长度不相等"><a href="#1-长度不相等" class="headerlink" title="1.长度不相等"></a>1.长度不相等</h4><h5 id="1-first-length-gt-second-length"><a href="#1-first-length-gt-second-length" class="headerlink" title="1)first.length() &gt; second.length();"></a>1)first.length() &gt; second.length();</h5><p>​      如果为一次操作，说明这是删除操作。</p><p>​  删除操作如果不发生在尾部必然会导致数组的偏移导致不对等，所以我们在遇到第一个不相等的字符的时候让first指针p向后位移一位,然后继续比较即可.</p><h5 id="2-second-length-gt-first-length"><a href="#2-second-length-gt-first-length" class="headerlink" title="2)second.length() &gt; first.length();"></a>2)second.length() &gt; first.length();</h5><p>   与1)的情况是一样的，我们可以把 first与second交换一下 让second变成first first变成second，那么我们就可以复用1)的代码了</p><p><img src="https://pic.leetcode-cn.com/1652409434-MGkAOj-QQ%E6%88%AA%E5%9B%BE20220513103545.png"></p><h4 id="2-长度相等"><a href="#2-长度相等" class="headerlink" title="2.长度相等"></a>2.长度相等</h4><p>​  一定是替换操作，那么我们只需要比较两个字符串对应位置不相等字符串的个数即可，如果不相等的字符超过1说明替换操作发生</p><p>  不止一次.(我这里只是完全遍历了一遍，后续我可能会在优化，因为只需要跳过第一个不相等的字符进行比较就行)</p><p>  <em><strong>*!!改了后发现用跳过第一个字符后在比较不如直接完全遍历一次然后再判断的效率高。*</strong></em></p><p><img src="https://pic.leetcode-cn.com/1652409439-wMJogJ-QQ%E6%88%AA%E5%9B%BE20220513103655.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">oneEditAway</span><span class="token punctuation">(</span><span class="token class-name">String</span> first<span class="token punctuation">,</span> <span class="token class-name">String</span> second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> firstChar <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> secondChar <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//O(n)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> secondChar<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            firstChar <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            secondChar <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">&lt;</span>firstChar<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> q<span class="token operator">&lt;</span> secondChar<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>firstChar<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">!=</span> secondChar<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                p<span class="token operator">++</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>firstChar<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">!=</span> secondChar<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p<span class="token operator">++</span><span class="token punctuation">;</span>            q<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>449.序列化和反序列化二叉搜索树</title>
      <link href="/2022/05/11/449-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/2022/05/11/449-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：449-序列化和反序列化二叉搜索树"><a href="#题目：449-序列化和反序列化二叉搜索树" class="headerlink" title="题目：449. 序列化和反序列化二叉搜索树"></a>题目：<a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/"><a href="https://leetcode.cn/problems/serialize-and-deserialize-bst/">449. 序列化和反序列化二叉搜索树</a></a></h2><p><strong>难度：中等</strong></p><p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。设计一个算法来序列化和反序列化 二叉搜索树 。 对序列化&#x2F;反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。编码的字符串应尽可能紧凑。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://pic.leetcode-cn.com/1652255721-UpnvvT-QQ%E6%88%AA%E5%9B%BE20220511155439.png"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>1.序列化就是先序遍历BST转化成字符串<br>2.反序列化本质就是先序遍历的结果，在当前节点所有比当前节点小的数据构成该节点的左子树，所有比当前节点大的数据<br>构成当前节点的右子树，这样递归下去，就可以反序列化到原来的BST.</p><p><img src="https://pic.leetcode-cn.com/1652255489-LtjGpB-QQ%E6%88%AA%E5%9B%BE20220511155004.png"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Codec</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Encodes a tree to a single string.</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sb<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>sb<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">List</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Decodes your encoded data to tree.</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> split<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TreeNode</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从当前节点开始向右搜索比当前节点值大的第一个节点，并将该节点作为右子树</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> j <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>r<span class="token punctuation">,</span>ss<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>101.对称二叉树</title>
      <link href="/2022/05/10/101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2022/05/10/101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目：101-对称二叉树"><a href="#题目：101-对称二叉树" class="headerlink" title="题目：101. 对称二叉树"></a>题目：<a href="https://leetcode.cn/problems/verifying-an-alien-dictionary/"><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></a></h2><p><strong>难度：简单</strong></p><p>  给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对</p><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">输入：root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/05/23/d566fb1f2d31a87a.jpg"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>  对称二叉树要求左右子树对应节点的val相等，那么我们可以同时对左右子树进行遍历，只要在遍历过程中出现对应节点val<br>不相等的情况，我们可以认定该二叉树不对称。在此过程中，如果出现左节点为空，右节点不为空的情况或者右节点为空，左节点<br>不为空的情况同样该二叉树不对称</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> lt<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>rt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span> rt<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>rt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span> lt<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>val <span class="token operator">!=</span> rt<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>right<span class="token punctuation">,</span>rt<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>left<span class="token punctuation">,</span>rt<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化：去掉全局变量</strong></p><p><img src="https://pic.leetcode-cn.com/1652187251-riTQZI-QQ%E6%88%AA%E5%9B%BE20220510204923.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> lt<span class="token punctuation">,</span><span class="token class-name">TreeNode</span> rt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>rt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span> rt<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>rt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">&amp;&amp;</span> lt<span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>val <span class="token operator">!=</span> rt<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>right<span class="token punctuation">,</span>rt<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>lt<span class="token punctuation">.</span>left<span class="token punctuation">,</span>rt<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 力扣每日一题 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 先序遍历 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
